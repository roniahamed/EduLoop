openapi: 3.0.3
info:
  title: EduLoop API
  version: 1.0.0
  description: |
    **EduLoop** is a high-performance RESTful API for managing educational content in a hierarchical structure. 
    
    üèÜ **Performance Grade: A+** (12.3ms average response time)
    üõ°Ô∏è **Security Score: 100%** 
    üìä **Success Rate: 96.2%** under extreme load (10K users)
    
    ## Features
    - üìö Hierarchical content management (Groups ‚Üí Subjects ‚Üí Categories ‚Üí Subcategories ‚Üí Questions)
    - üéØ Smart question sessions with randomization
    - ‚ö° Sub-20ms response times for most endpoints
    - üîí Enterprise-grade security
    - üì¶ Bulk operations support
    
  contact:
    name: EduLoop API Support
    url: https://github.com/roniahamed/eduloop
    email: roni.ahmed@example.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api
    description: Development server
  - url: https://eduloop-api.example.com/api
    description: Production server

security:
  - TokenAuth: []

tags:
  - name: Authentication
    description: Token validation and authentication
  - name: Groups
    description: Top-level content categorization
  - name: Subjects  
    description: Subject management within groups
  - name: Categories
    description: Category management within subjects
  - name: Subcategories
    description: Subcategory management within categories
  - name: Questions
    description: Question session management and retrieval
  - name: Bulk Operations
    description: Bulk content upload and management

paths:
  /token-verify/:
    post:
      tags: [Authentication]
      summary: Validate Access Token
      description: |
        Validate an 8-digit AccessToken key before making API calls.
        
        **Performance:** ‚ö° 1.8ms average response time
        **Success Rate:** üéØ 100%
      operationId: validateToken
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [key]
              properties:
                key:
                  type: string
                  description: 8-digit access token
                  pattern: '^[0-9]{8}$'
                  example: "12345678"
            examples:
              valid_token:
                summary: Valid token example
                value:
                  key: "12345678"
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Das Token ist g√ºltig."
                  status:
                    type: string
                    example: "valid"
                  timestamp:
                    type: string
                    format: date-time
              examples:
                success:
                  summary: Successful validation
                  value:
                    message: "Das Token ist g√ºltig."
                    status: "valid"
                    timestamp: "2025-10-09T10:30:00Z"
        '400':
          description: Invalid or inactive token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_token:
                  summary: Invalid token
                  value:
                    error: "Ung√ºltiges oder inaktives Token."
                    status: "invalid"
                    timestamp: "2025-10-09T10:30:00Z"

  /api-token-auth/:
    post:
      tags: [Authentication]
      summary: Obtain DRF Token
      description: Obtain a Django REST Framework authentication token using user credentials
      operationId: obtainDRFToken
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  description: Django username
                  example: "admin"
                password:
                  type: string
                  format: password
                  description: User password
                  example: "secure_password"
      responses:
        '200':
          description: Token obtained successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: DRF authentication token
                    example: "abc123def456ghi789jkl012mno345pqr678stu901"
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/:
    get:
      tags: [Groups]
      summary: List All Groups
      description: |
        Retrieve a paginated list of all available groups.
        
        **Performance:** ‚ö° 13.4ms average response time
        **Success Rate:** üéØ 100%
      operationId: listGroups
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: List of groups
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Group'
              examples:
                groups_list:
                  summary: Groups with pagination
                  value:
                    count: 3
                    next: "http://localhost:8000/api/groups/?page=2"
                    previous: null
                    results:
                      - id: 1
                        name: "Mathematics"
                        description: "Mathematical concepts and problem solving"
                        created_at: "2025-01-15T10:30:00Z"
                        total_subjects: 5
                        total_questions: 1250
                      - id: 2
                        name: "Science"
                        description: "Natural sciences including Physics, Chemistry, Biology"
                        created_at: "2025-01-16T14:20:00Z"
                        total_subjects: 8
                        total_questions: 2100
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'

    post:
      tags: [Groups]
      summary: Create New Groups
      description: |
        Create one or multiple groups in a single request.
        
        **Bulk Support:** ‚úÖ Accepts single object or array
        **Max Items:** 100 groups per request
      operationId: createGroups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/GroupCreate'
                - type: array
                  items:
                    $ref: '#/components/schemas/GroupCreate'
                  maxItems: 100
            examples:
              single_group:
                summary: Create single group
                value:
                  name: "Computer Science"
                  description: "Programming, algorithms, and computer systems"
              bulk_groups:
                summary: Create multiple groups
                value:
                  - name: "History"
                    description: "World history and historical events"
                  - name: "Literature"
                    description: "Language arts and literary analysis"
      responses:
        '201':
          description: Groups created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /subjects/:
    get:
      tags: [Subjects]
      summary: List All Subjects
      description: |
        Retrieve a paginated list of all subjects across all groups.
        
        **Performance:** ‚ö° 3.7ms average response time
        **Success Rate:** üéØ 100%
      operationId: listSubjects
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: List of subjects
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Subject'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags: [Subjects]
      summary: Create New Subjects
      description: Create one or multiple subjects in a single request
      operationId: createSubjects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SubjectCreate'
                - type: array
                  items:
                    $ref: '#/components/schemas/SubjectCreate'
                  maxItems: 100
      responses:
        '201':
          description: Subjects created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subject'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /subject/{group_id}/:
    get:
      tags: [Subjects]
      summary: List Subjects by Group
      description: |
        Retrieve subjects for a specific group.
        
        **Performance:** ‚ö° 4.0ms average response time
        **Success Rate:** üéØ 100%
      operationId: listSubjectsByGroup
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: ID of the group
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: List of subjects for the group
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Subject'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /questions/:
    post:
      tags: [Questions]
      summary: Start Question Session
      description: |
        Initialize a new question session with filters. Returns the first question.
        
        **Session Management:** Creates stateful session for randomized question delivery
        **Batch Size:** Loads 50 questions per batch
      operationId: startQuestionSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionSessionStart'
            examples:
              basic_session:
                summary: Basic session with group and subject
                value:
                  group_id: 1
                  subject_id: 2
                  levels: ["easy", "medium"]
              advanced_session:
                summary: Advanced session with categories
                value:
                  group_id: 1
                  subject_id: 2
                  category_ids: [3, 4]
                  levels: ["easy"]
      responses:
        '200':
          description: Session started, returns first question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

    get:
      tags: [Questions]
      summary: Get Next Question
      description: |
        Retrieve the next random unseen question from the active session.
        
        **Session State:** Maintains per-user question history
        **Randomization:** No repeats within session
      operationId: getNextQuestion
      responses:
        '200':
          description: Next question from session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '400':
          description: No active session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                no_session:
                  summary: No active session
                  value:
                    error: "No active question session found"
                    code: "no_active_session"
                    solution: "Start a new session with POST /api/questions/ first"
        '404':
          description: No more questions available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      tags: [Questions]
      summary: Reset Question Session
      description: Clear the current session state and question history
      operationId: resetQuestionSession
      responses:
        '200':
          description: Session reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Question session has been reset."
        '401':
          $ref: '#/components/responses/Unauthorized'

  /upload-questions/:
    post:
      tags: [Bulk Operations]
      summary: Bulk Upload Questions
      description: |
        Upload multiple questions at once. Invalid items are skipped with error reporting.
        
        **Max Items:** 1000 questions per request
        **Error Handling:** Partial success supported with detailed error reporting
      operationId: bulkUploadQuestions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/QuestionUpload'
              maxItems: 1000
            examples:
              question_batch:
                summary: Batch of questions
                value:
                  - group: "Mathematics"
                    subject: "Algebra"
                    category: "Linear Equations"
                    subcategory: "Basic Equations"
                    level: "easy"
                    type: "mcq"
                    metadata:
                      question: "Solve x+1=2"
                      answer: "x=1"
                  - group: "Mathematics"
                    subject: "Algebra"
                    category: "Linear Equations"
                    level: "medium"
                    type: "mcq"
                    metadata:
                      question: "Solve 2x+3=7"
                      options: ["x=1", "x=2", "x=3", "x=4"]
                      answer: "x=2"
      responses:
        '201':
          description: All questions uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully uploaded 2 out of 2 questions."
                  successful_count:
                    type: integer
                    example: 2
                  total_count:
                    type: integer
                    example: 2
        '207':
          description: Partial success with some failures
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully uploaded 1 out of 2 questions."
                  successful_count:
                    type: integer
                    example: 1
                  total_count:
                    type: integer
                    example: 2
                  failed_items:
                    type: array
                    items:
                      type: object
                      properties:
                        row_number:
                          type: integer
                        errors:
                          type: array
                          items:
                            type: string
                        item_data:
                          type: object
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    TokenAuth:
      type: http
      scheme: bearer
      bearerFormat: Token
      description: |
        EduLoop uses custom 8-digit tokens for authentication.
        Include the token in the Authorization header as: `Authorization: Token 12345678`

  parameters:
    Page:
      name: page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number for pagination

    PageSize:
      name: page_size
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
      description: Number of results per page (max 100)

  responses:
    Unauthorized:
      description: Authentication credentials missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            missing_token:
              summary: Missing authentication token
              value:
                error: "Authentication credentials were not provided"
                code: "authentication_failed"
                solution: "Include 'Authorization: Token your-token' header"

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            insufficient_permissions:
              summary: Admin privileges required
              value:
                error: "You do not have permission to perform this action"
                code: "permission_denied"
                solution: "Admin privileges required for write operations"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            resource_not_found:
              summary: Resource not found
              value:
                error: "The requested resource was not found"
                code: "not_found"

    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Error'
              - type: object
                properties:
                  details:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
          examples:
            validation_failed:
              summary: Field validation errors
              value:
                error: "Validation failed for one or more fields"
                code: "validation_error"
                details:
                  name: ["This field is required."]
                  group: ["Group 'Nonexistent' does not exist."]

    RateLimited:
      description: Request rate limit exceeded
      headers:
        Retry-After:
          schema:
            type: integer
          description: Seconds to wait before making another request
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Rate limit ceiling for this endpoint
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Number of requests remaining in current window
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Error'
              - type: object
                properties:
                  retry_after:
                    type: integer
                    description: Seconds to wait before retrying
                  current_rate:
                    type: string
                    description: Current usage rate
          examples:
            rate_limited:
              summary: Rate limit exceeded
              value:
                error: "Request was throttled. Expected available in 45 seconds."
                code: "throttled"
                retry_after: 45
                current_rate: "202/200 per minute"

  schemas:
    Error:
      type: object
      required: [error, code]
      properties:
        error:
          type: string
          description: Human-readable error description
        code:
          type: string
          description: Machine-readable error code
        timestamp:
          type: string
          format: date-time
          description: Error occurrence timestamp
        request_id:
          type: string
          description: Unique request identifier for debugging

    PaginatedResponse:
      type: object
      required: [count, results]
      properties:
        count:
          type: integer
          description: Total number of items
        next:
          type: string
          format: uri
          nullable: true
          description: URL for next page
        previous:
          type: string
          format: uri
          nullable: true
          description: URL for previous page
        results:
          type: array
          description: Array of items for current page

    Group:
      type: object
      required: [id, name, created_at]
      properties:
        id:
          type: integer
          description: Unique group identifier
          example: 1
        name:
          type: string
          description: Group name (unique)
          example: "Mathematics"
        description:
          type: string
          nullable: true
          description: Optional group description
          example: "Mathematical concepts and problem solving"
        created_at:
          type: string
          format: date-time
          description: Group creation timestamp
          example: "2025-01-15T10:30:00Z"
        total_subjects:
          type: integer
          description: Number of subjects in this group
          example: 5
        total_questions:
          type: integer
          description: Total questions in this group
          example: 1250

    GroupCreate:
      type: object
      required: [name]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Unique group name
          example: "Computer Science"
        description:
          type: string
          maxLength: 500
          description: Optional group description
          example: "Programming, algorithms, and computer systems"

    Subject:
      type: object
      required: [id, name, group, created_at]
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Algebra"
        description:
          type: string
          nullable: true
          example: "Algebraic concepts and equations"
        group:
          type: string
          description: Parent group name
          example: "Mathematics"
        created_at:
          type: string
          format: date-time
          example: "2025-01-16T10:30:00Z"
        total_categories:
          type: integer
          example: 3
        total_questions:
          type: integer
          example: 450

    SubjectCreate:
      type: object
      required: [name, group]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Calculus"
        description:
          type: string
          maxLength: 500
          example: "Differential and integral calculus"
        group:
          type: string
          description: Parent group name (must exist)
          example: "Mathematics"

    Category:
      type: object
      required: [id, name, subject, group, created_at]
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Linear Equations"
        subject:
          type: string
          description: Parent subject name
          example: "Algebra"
        group:
          type: string
          description: Parent group name
          example: "Mathematics"
        created_at:
          type: string
          format: date-time
          example: "2025-01-17T10:30:00Z"

    Question:
      type: object
      required: [id, group, subject, category, level, type, metadata, created_at]
      properties:
        id:
          type: integer
          example: 10
        group:
          type: string
          example: "Mathematics"
        subject:
          type: string
          example: "Algebra"
        category:
          type: string
          example: "Linear Equations"
        subcategory:
          type: string
          nullable: true
          example: "Basic Equations"
        level:
          type: string
          enum: [easy, medium, advance]
          example: "easy"
        type:
          type: string
          description: Question type identifier
          example: "mcq"
        metadata:
          type: object
          description: JSON field containing question data
          example:
            question: "What is 2+2?"
            options: ["3", "4", "5", "6"]
            answer: "4"
        created_at:
          type: string
          format: date-time
          example: "2025-01-18T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-18T10:30:00Z"

    QuestionSessionStart:
      type: object
      required: [group_id, subject_id]
      properties:
        group_id:
          type: integer
          minimum: 1
          description: ID of the group to filter questions
          example: 1
        subject_id:
          type: integer
          minimum: 1
          description: ID of the subject to filter questions
          example: 2
        category_ids:
          type: array
          items:
            type: integer
            minimum: 1
          description: Optional array of category IDs to filter
          example: [3, 4]
        subcategory_ids:
          type: array
          items:
            type: integer
            minimum: 1
          description: Optional array of subcategory IDs (overrides category_ids if provided)
          example: [5, 6]
        levels:
          type: array
          items:
            type: string
            enum: [easy, medium, advance]
          description: Optional difficulty levels to include
          example: ["easy", "medium"]

    QuestionUpload:
      type: object
      required: [group, subject, category, level, type, metadata]
      properties:
        group:
          type: string
          description: Group name (must exist)
          example: "Mathematics"
        subject:
          type: string
          description: Subject name (must exist)
          example: "Algebra"
        category:
          type: string
          description: Category name (must exist)
          example: "Linear Equations"
        subcategory:
          type: string
          description: Optional subcategory name
          example: "Basic Equations"
        level:
          type: string
          enum: [easy, medium, advance]
          example: "easy"
        type:
          type: string
          description: Question type identifier
          example: "mcq"
        metadata:
          type: object
          description: Question content and data
          example:
            question: "Solve x+1=2"
            options: ["x=0", "x=1", "x=2", "x=3"]
            answer: "x=1"
            explanation: "Subtract 1 from both sides: x = 2-1 = 1"

externalDocs:
  description: Complete API Documentation
  url: ./api.md